generator client {  
  provider = "prisma-client-js"  
}  

datasource db {  
  provider = "postgresql"  
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")  
}  

model User {  
  id        String   @id @default(cuid())  
  kindeId   String  
  fullName  String  
  avatar    String?  
  email     String   @unique  
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt  
  role      Role     @default(JOBSEEKER)  

  employer  Employer?  
  jobSeeker JobSeeker?  
}  

enum Role {  
  EMPLOYER  
  JOBSEEKER  
}  

model Employer {  
  id          String   @id @default(cuid()) 
  companyName String  
  website     String?
  companyLogo String?
  user        User     @relation(fields: [userId], references: [id])  
  userId      String      @unique  
  jobs        Job[]  
}  

model JobSeeker {  
  id          String     @id @default(cuid())  
  headline    String?  
  bio         String?  
  skills      String[]  
  location    String?  
  phone       String?  
  gender      String? 
  totalYearsExperience Int?  
  user        User     @relation(fields: [userId], references: [id])  
  userId      String      @unique  
  applications Application[]  
  savedJobs    SavedJob[]  
  experiences  Experience[]  
  socialProfiles SocialProfile[]  
}  

model Experience {  
  id          String    @id @default(cuid())  
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id])  
  jobSeekerId String  
  jobTitle    String
  designation String  
  term        String  
  company     String 
  summary     String?  
  jobType     String?
}  

model SocialProfile {  
  id          String    @id @default(cuid())  
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id])  
  jobSeekerId String  
  platform    String  
  url         String  
}

model Job {
  id              String     @id @default(cuid())  
  title           String  
  description     String  
  employer        Employer   @relation(fields: [employerId], references: [id])  
  employerId      String  
  createdAt       DateTime   @default(now())  
  updatedAt       DateTime   @updatedAt  
  applications    Application[]  
  savedJobs       SavedJob[]  
  externalSourceID String?  
  companyName     String
  companyLogo     String?
  type            String  
  location        String
  descriptionType String     @db.VarChar(5)  
  validUntil      DateTime?
  postedOn        DateTime?  
  categories      String?  
  level           String?   
  externalSourceUrl String?
  employmentTypes String?
}

model Application {
  id          String  @id @default(cuid()) 
  jobId       String  
  job         Job     @relation(fields: [jobId], references: [id])  
  jobSeekerId String  
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id])  
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt  
  status      ApplicationStatus @default(PENDING)  
}  

enum ApplicationStatus {  
  PENDING  
  INTERVIEWING  
  REJECTED  
  OFFERED  
  HIRED  
}  

model SavedJob {
  id          String    @id @default(cuid())
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id])  
  jobSeekerId String  
  job         Job     @relation(fields: [jobId], references: [id])  
  jobId       String  
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt  
}