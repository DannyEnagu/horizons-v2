generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {  
  id        Int      @id @default(autoincrement())  
  kindeId   String  
  fullName  String  
  avatar    String?  
  email     String   @unique  
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt  
  role      Role     @default(JOBSEEKER)  

  employer  Employer?  
  jobSeeker JobSeeker?  
}  

enum Role {  
  EMPLOYER  
  JOBSEEKER  
}  

model Employer {  
  id          Int      @id @default(autoincrement())  
  companyName String  
  website     String?  
  user        User     @relation(fields: [userId], references: [id])  
  userId      Int      @unique  
  jobs        Job[]  
}  

model JobSeeker {  
  id          Int      @id @default(autoincrement())  
  headline    String?  
  bio         String?  
  skills      String[]  
  experience  String? // Consider a more structured approach here (e.g., separate Experience model)  
  user        User     @relation(fields: [userId], references: [id])  
  userId      Int      @unique  
  applications Application[]  
}  

model Job {  
  id          Int      @id @default(autoincrement())  
  title       String  
  description String  
  employer    Employer @relation(fields: [employerId], references: [id])  
  employerId  Int  
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt  
  applications Application[]  
}  

model Application {  
  id          Int      @id @default(autoincrement())  
  jobId       Int  
  job         Job     @relation(fields: [jobId], references: [id])  
  jobSeekerId Int  
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id])  
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt  
  status      ApplicationStatus @default(PENDING)  
}  

enum ApplicationStatus {  
  PENDING  
  INTERVIEWING  
  REJECTED  
  OFFERED  
  HIRED  
}
